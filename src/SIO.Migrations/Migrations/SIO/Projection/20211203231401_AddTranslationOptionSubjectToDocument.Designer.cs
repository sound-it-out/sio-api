// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIO.Infrastructure.EntityFrameworkCore.DbContexts;

namespace SIO.Migrations.Migrations.SIO.Projection
{
    [DbContext(typeof(SIOProjectionDbContext))]
    [Migration("20211203231401_AddTranslationOptionSubjectToDocument")]
    partial class AddTranslationOptionSubjectToDocument
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SIO.Domain.Audits.Projections.Audit", b =>
                {
                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Subject");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("SIO.Domain.Documents.Projections.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CharactersProcessed")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TotalCharacters")
                        .HasColumnType("bigint");

                    b.Property<string>("TranslationOptionSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationProgress")
                        .HasColumnType("int");

                    b.Property<string>("TranslationSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationType")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("SIO.Domain.Documents.Projections.UserDocuments", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("SIO.Domain.TranslationOptions.Projections.TranslationOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TranslationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TranslationOption");
                });

            modelBuilder.Entity("SIO.Infrastructure.EntityFrameworkCore.Entities.ProjectionState", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.HasKey("Name");

                    b.ToTable("ProjectionState");
                });

            modelBuilder.Entity("SIO.Domain.Audits.Projections.Audit", b =>
                {
                    b.OwnsMany("SIO.Domain.Audits.Projections.AuditEvent", "Events", b1 =>
                        {
                            b1.Property<string>("Id")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("AuditId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Message")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("TimeStamp")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("User")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("AuditId");

                            b1.ToTable("AuditEvent");

                            b1.WithOwner()
                                .HasForeignKey("AuditId");
                        });

                    b.Navigation("Events");
                });

            modelBuilder.Entity("SIO.Domain.Documents.Projections.UserDocuments", b =>
                {
                    b.OwnsMany("SIO.Domain.Documents.Projections.UserDocument", "Documents", b1 =>
                        {
                            b1.Property<string>("DocumentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("FileName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ParentId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("DocumentId");

                            b1.HasIndex("ParentId");

                            b1.ToTable("UserDocument");

                            b1.WithOwner()
                                .HasForeignKey("ParentId");
                        });

                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
